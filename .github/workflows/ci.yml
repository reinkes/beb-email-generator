name: 🚀 CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [published]

jobs:
  test:
    name: 🧪 Run Tests
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18, 20]
        browser: [chrome, firefox]

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🟢 Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v5
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: 📦 Install dependencies
      run: |
        npm install --no-package-lock
        # Install test dependencies
        npm install --no-save puppeteer playwright @playwright/test

    - name: 🧪 Run JavaScript tests
      run: |
        # Create a simple test runner for Node.js environment
        node -e "
        console.log('🧪 Running JavaScript module tests...');

        // Simple require simulation for browser modules
        global.window = {};
        global.document = {
          createElement: () => ({ style: {}, classList: { add: () => {}, remove: () => {} } }),
          querySelector: () => null,
          addEventListener: () => {}
        };
        global.localStorage = {
          getItem: () => null,
          setItem: () => {},
          removeItem: () => {}
        };
        global.performance = { now: () => Date.now() };
        global.navigator = { userAgent: 'test' };
        global.location = { protocol: 'https:', hostname: 'localhost' };

        // Load and test modules
        try {
          require('fs').readFileSync('./js/storage.js', 'utf8');
          require('fs').readFileSync('./js/validation.js', 'utf8');
          require('fs').readFileSync('./js/calendar.js', 'utf8');
          console.log('✅ All JavaScript modules load successfully');
        } catch (e) {
          console.error('❌ Module loading failed:', e.message);
          process.exit(1);
        }
        "

    - name: 🌐 Run browser tests
      run: |
        # Create a simple HTTP server and run browser tests
        npx http-server . -p 8080 -s &
        SERVER_PID=$!
        sleep 3

        # Run tests with Puppeteer
        node -e "
        const puppeteer = require('puppeteer');

        (async () => {
          const browser = await puppeteer.launch({ headless: true });
          const page = await browser.newPage();

          // Navigate to test page
          await page.goto('http://localhost:8080/tests/test.html', { waitUntil: 'networkidle0' });

          // Wait for tests to load and run
          await page.waitForSelector('#runAllTests', { timeout: 10000 });

          // Click run tests button
          await page.click('#runAllTests');

          // Wait for tests to complete
          await page.waitForFunction(
            () => {
              const button = document.querySelector('#runAllTests');
              return button && !button.disabled && !button.textContent.includes('⏳');
            },
            { timeout: 30000 }
          );

          // Get test results
          const stats = await page.evaluate(() => {
            return {
              passed: parseInt(document.querySelector('#passedCount')?.textContent || '0'),
              failed: parseInt(document.querySelector('#failedCount')?.textContent || '0'),
              total: parseInt(document.querySelector('#totalCount')?.textContent || '0')
            };
          });

          console.log(\`🧪 Test Results: \${stats.passed} passed, \${stats.failed} failed, \${stats.total} total\`);

          if (stats.failed > 0) {
            console.error('❌ Tests failed!');
            process.exit(1);
          } else {
            console.log('✅ All tests passed!');
          }

          await browser.close();
        })().catch(err => {
          console.error('❌ Browser test failed:', err);
          process.exit(1);
        });
        "

        kill $SERVER_PID

    - name: 📊 Validate HTML
      run: |
        # Install HTML validator
        npm install --no-save html-validate

        # Validate HTML files
        npx html-validate index.html tests/test.html || echo "⚠️ HTML validation warnings (non-blocking)"

    - name: 🔍 Security scan
      run: |
        # Basic security checks
        echo "🔍 Running security checks..."

        # Check for common security issues
        if grep -r "eval(" js/ 2>/dev/null; then
          echo "❌ Found eval() usage - security risk"
          exit 1
        fi

        if grep -r "innerHTML.*+" js/ 2>/dev/null; then
          echo "❌ Found dynamic innerHTML - potential XSS risk"
          exit 1
        fi

        echo "✅ Basic security checks passed"

    - name: 📏 Code quality checks
      run: |
        echo "📏 Running code quality checks..."

        # Check file sizes
        HTML_SIZE=$(wc -c < index.html)
        if [ $HTML_SIZE -gt 100000 ]; then
          echo "⚠️ HTML file is large: ${HTML_SIZE} bytes"
        fi

        # Count JavaScript modules
        JS_FILES=$(find js/ -name "*.js" | wc -l)
        echo "📦 JavaScript modules: $JS_FILES"

        # Check for TODO comments in production code
        TODO_COUNT=$(grep -r "TODO\|FIXME\|HACK" js/ | wc -l)
        if [ $TODO_COUNT -gt 0 ]; then
          echo "📝 Found $TODO_COUNT TODO/FIXME comments"
        fi

        echo "✅ Code quality checks completed"

  accessibility:
    name: ♿ Accessibility Tests
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v5
      with:
        node-version: '20'

    - name: 📦 Install axe-core
      run: npm install --no-save @axe-core/cli

    - name: ♿ Run accessibility tests
      run: |
        # Start server
        npx http-server . -p 8080 -s &
        SERVER_PID=$!
        sleep 3

        # Run accessibility tests
        npx axe http://localhost:8080 --exit || echo "⚠️ Accessibility issues found (non-blocking for now)"

        kill $SERVER_PID

  performance:
    name: ⚡ Performance Tests
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v5
      with:
        node-version: '20'

    - name: 📦 Install Lighthouse CI
      run: npm install --no-save @lhci/cli

    - name: ⚡ Run Lighthouse CI
      run: |
        # Start server
        npx http-server . -p 8080 -s &
        SERVER_PID=$!
        sleep 3

        # Run Lighthouse
        npx lhci autorun --upload.target=temporary-public-storage --collect.url=http://localhost:8080 || echo "⚠️ Performance issues found (non-blocking for now)"

        kill $SERVER_PID

  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test, accessibility, performance]
    if: github.ref == 'refs/heads/develop'

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🚀 Deploy to staging
      run: |
        echo "🚀 Deploying to staging environment..."
        echo "✅ Staging deployment completed"
        # Add actual deployment commands here

  deploy-production:
    name: 🌐 Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, accessibility, performance]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🌐 Deploy to production
      run: |
        echo "🌐 Deploying to production..."
        echo "✅ Production deployment completed"
        # Add actual deployment commands here

    - name: 📊 Update deployment status
      run: |
        echo "📊 Updating deployment status badges..."
        # This would typically update deployment status

  release:
    name: 📦 Create Release Assets
    runs-on: ubuntu-latest
    if: github.event_name == 'release'

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 📦 Create distribution package
      run: |
        # Create dist directory
        mkdir -p dist

        # Copy main files
        cp index.html dist/
        cp -r js/ dist/
        cp -r tests/ dist/
        cp README.md dist/
        cp TODO.md dist/
        cp TECHNICAL_IMPROVEMENTS.md dist/
        cp version.json dist/

        # Create archive
        tar -czf beb-email-generator-${{ github.event.release.tag_name }}.tar.gz -C dist .
        zip -r beb-email-generator-${{ github.event.release.tag_name }}.zip dist/

    - name: 📤 Upload release assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./beb-email-generator-${{ github.event.release.tag_name }}.tar.gz
        asset_name: beb-email-generator-${{ github.event.release.tag_name }}.tar.gz
        asset_content_type: application/gzip