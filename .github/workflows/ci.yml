name: 🚀 CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [published]

jobs:
  test:
    name: 🧪 Run Tests
    runs-on: ubuntu-latest

    strategy:
      matrix:
        browser: [chrome, firefox]

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🧪 Validate JavaScript files
      run: |
        echo "🧪 Running JavaScript validation..."

        # Check if all JS files exist and are readable
        for file in js/*.js; do
          if [ -f "$file" ]; then
            echo "✅ Found: $file"
            # Basic syntax check using node (if available)
            if command -v node >/dev/null 2>&1; then
              node -c "$file" && echo "✅ Syntax OK: $file" || echo "❌ Syntax Error: $file"
            fi
          else
            echo "❌ Missing: $file"
            exit 1
          fi
        done

        echo "✅ JavaScript validation completed"

    - name: 🌐 Setup simple HTTP server
      run: |
        # Install Python (available by default) to serve files
        echo "🌐 Starting HTTP server..."
        python3 -m http.server 8080 &
        SERVER_PID=$!
        echo $SERVER_PID > server.pid
        sleep 3

        # Test if server is running
        curl -f http://localhost:8080/ > /dev/null && echo "✅ Server is running" || echo "❌ Server failed to start"

    - name: 🧪 Run browser tests with curl
      run: |
        echo "🧪 Running browser compatibility tests..."

        # Test main page loads
        curl -f -s http://localhost:8080/index.html > /dev/null && echo "✅ Main page loads" || echo "❌ Main page failed"

        # Test test page loads
        curl -f -s http://localhost:8080/tests/test.html > /dev/null && echo "✅ Test page loads" || echo "❌ Test page failed"

        # Test JS modules load
        for file in js/*.js; do
          if [ -f "$file" ]; then
            curl -f -s "http://localhost:8080/$file" > /dev/null && echo "✅ Module loads: $file" || echo "❌ Module failed: $file"
          fi
        done

        echo "✅ Browser compatibility tests completed"

    - name: 📊 Validate HTML structure
      run: |
        echo "📊 Running HTML validation..."

        # Basic HTML structure validation using grep
        if grep -q "<!DOCTYPE html>" index.html; then
          echo "✅ DOCTYPE declaration found"
        else
          echo "❌ DOCTYPE declaration missing"
          exit 1
        fi

        if grep -q "<html" index.html; then
          echo "✅ HTML tag found"
        else
          echo "❌ HTML tag missing"
          exit 1
        fi

        if grep -q "</html>" index.html; then
          echo "✅ Closing HTML tag found"
        else
          echo "❌ Closing HTML tag missing"
          exit 1
        fi

        echo "✅ HTML validation completed"

    - name: 🔍 Security scan
      run: |
        echo "🔍 Running security checks..."

        # Check for common security issues
        if grep -r "eval(" js/ 2>/dev/null; then
          echo "❌ Found eval() usage - security risk"
          exit 1
        fi

        if grep -r "innerHTML.*+" js/ 2>/dev/null; then
          echo "❌ Found dynamic innerHTML - potential XSS risk"
          exit 1
        fi

        # Check for script tags in HTML that might be vulnerable
        if grep -r "<script.*src=" index.html | grep -v "js/"; then
          echo "⚠️ Found external script references"
        fi

        # Check for hardcoded credentials
        if grep -ri "password\|secret\|key.*=" js/ --include="*.js" | grep -v "STORAGE_KEY\|getStoredTheme"; then
          echo "❌ Found potential hardcoded credentials"
          exit 1
        fi

        echo "✅ Basic security checks passed"

    - name: 📏 Code quality checks
      run: |
        echo "📏 Running code quality checks..."

        # Check file sizes
        HTML_SIZE=$(wc -c < index.html)
        if [ $HTML_SIZE -gt 100000 ]; then
          echo "⚠️ HTML file is large: ${HTML_SIZE} bytes"
        fi

        # Count JavaScript modules
        JS_FILES=$(find js/ -name "*.js" | wc -l)
        echo "📦 JavaScript modules: $JS_FILES"

        # Check for TODO comments in production code
        TODO_COUNT=$(grep -r "TODO\|FIXME\|HACK" js/ | wc -l)
        if [ $TODO_COUNT -gt 0 ]; then
          echo "📝 Found $TODO_COUNT TODO/FIXME comments"
        fi

        echo "✅ Code quality checks completed"

    - name: 🧹 Clean up server
      run: |
        # Kill the HTTP server
        if [ -f server.pid ]; then
          kill $(cat server.pid) 2>/dev/null || echo "Server already stopped"
          rm -f server.pid
        fi

  accessibility:
    name: ♿ Accessibility Tests
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: ♿ Basic accessibility checks
      run: |
        echo "♿ Running basic accessibility checks..."

        # Check for alt attributes on images
        if grep -r "<img" index.html | grep -v "alt="; then
          echo "⚠️ Found images without alt attributes"
        else
          echo "✅ All images have alt attributes"
        fi

        # Check for proper heading structure
        if grep -q "<h1" index.html; then
          echo "✅ H1 heading found"
        else
          echo "⚠️ No H1 heading found"
        fi

        # Check for form labels
        if grep -r "<input" index.html | grep -v "aria-label\|<label"; then
          echo "⚠️ Found inputs without labels"
        else
          echo "✅ All inputs have labels or aria-labels"
        fi

        # Check for ARIA attributes
        if grep -q "aria-" index.html; then
          echo "✅ ARIA attributes found"
        else
          echo "⚠️ No ARIA attributes found"
        fi

        echo "✅ Basic accessibility checks completed"

  performance:
    name: ⚡ Performance Tests
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: ⚡ Basic performance checks
      run: |
        echo "⚡ Running basic performance checks..."

        # Check file sizes
        HTML_SIZE=$(wc -c < index.html | tr -d ' ')
        echo "📄 HTML size: ${HTML_SIZE} bytes"
        if [ $HTML_SIZE -gt 100000 ]; then
          echo "⚠️ HTML file is large: ${HTML_SIZE} bytes"
        fi

        # Check JavaScript file sizes
        total_js_size=0
        for file in js/*.js; do
          if [ -f "$file" ]; then
            size=$(wc -c < "$file" | tr -d ' ')
            echo "📄 $file: ${size} bytes"
            total_js_size=$((total_js_size + size))
          fi
        done
        echo "📄 Total JavaScript: ${total_js_size} bytes"

        # Count HTTP requests (approximate)
        js_files=$(find js/ -name "*.js" | wc -l)
        echo "📡 JavaScript modules: $js_files"

        # Check for performance best practices
        if grep -q "defer\|async" index.html; then
          echo "✅ Script loading optimization found"
        else
          echo "⚠️ Consider adding defer/async to scripts"
        fi

        echo "✅ Basic performance checks completed"

  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test, accessibility, performance]
    if: github.ref == 'refs/heads/develop'

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🚀 Deploy to staging
      run: |
        echo "🚀 Deploying to staging environment..."
        echo "✅ Staging deployment completed"
        # Add actual deployment commands here

  deploy-production:
    name: 🌐 Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, accessibility, performance]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🌐 Deploy to production
      run: |
        echo "🌐 Deploying to production..."
        echo "✅ Production deployment completed"
        # Add actual deployment commands here

    - name: 📊 Update deployment status
      run: |
        echo "📊 Updating deployment status badges..."
        # This would typically update deployment status

  release:
    name: 📦 Create Release Assets
    runs-on: ubuntu-latest
    if: github.event_name == 'release'

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 📦 Create distribution package
      run: |
        # Create dist directory
        mkdir -p dist

        # Copy main files
        cp index.html dist/
        cp -r js/ dist/

        # Copy additional files if they exist
        [ -d tests/ ] && cp -r tests/ dist/ || echo "⚠️ No tests directory found"
        [ -f README.md ] && cp README.md dist/ || echo "⚠️ No README.md found"
        [ -f README.en.md ] && cp README.en.md dist/ || echo "⚠️ No README.en.md found"
        [ -f TODO.md ] && cp TODO.md dist/ || echo "⚠️ No TODO.md found"
        [ -f TECHNICAL_IMPROVEMENTS.md ] && cp TECHNICAL_IMPROVEMENTS.md dist/ || echo "⚠️ No TECHNICAL_IMPROVEMENTS.md found"
        [ -f version.json ] && cp version.json dist/ || echo "⚠️ No version.json found"
        [ -f LICENSE ] && cp LICENSE dist/ || echo "⚠️ No LICENSE found"

        # Create archive
        tar -czf beb-email-generator-${{ github.event.release.tag_name }}.tar.gz -C dist .
        zip -r beb-email-generator-${{ github.event.release.tag_name }}.zip dist/

    - name: 📤 Upload release assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./beb-email-generator-${{ github.event.release.tag_name }}.tar.gz
        asset_name: beb-email-generator-${{ github.event.release.tag_name }}.tar.gz
        asset_content_type: application/gzip