name: 🚀 CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [published]

jobs:
  test:
    name: 🧪 Run Tests
    runs-on: ubuntu-latest

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔍 Debug environment
      run: |
        echo "🔍 Debugging environment..."
        echo "Current directory: $(pwd)"
        echo "Directory contents:"
        ls -la
        echo "Node.js version: $(node --version || echo 'Node.js not available')"
        echo "Python version: $(python3 --version)"

    - name: 🧪 Validate JavaScript files
      run: |
        echo "🧪 Running JavaScript validation..."

        # Check if js directory exists
        if [ ! -d "js" ]; then
          echo "❌ js directory not found"
          echo "Available directories:"
          find . -type d -maxdepth 2
          exit 1
        fi

        echo "✅ js directory found"
        echo "Contents of js directory:"
        ls -la js/

        # Count JS files
        js_file_count=$(find js/ -name "*.js" | wc -l)
        echo "📁 Found $js_file_count JavaScript files"

        if [ $js_file_count -eq 0 ]; then
          echo "❌ No JavaScript files found in js/ directory"
          exit 1
        fi

        # List all JS files
        echo "📋 JavaScript files found:"
        find js/ -name "*.js"

        # Validate each JS file
        syntax_errors=0
        for file in js/*.js; do
          if [ -f "$file" ]; then
            echo "✅ Found: $file"

            # Check file size
            file_size=$(wc -c < "$file")
            echo "📏 Size: $file_size bytes"

            if [ $file_size -eq 0 ]; then
              echo "⚠️ Empty file: $file"
              continue
            fi

            # Show first few lines for debugging
            echo "📄 First 3 lines of $file:"
            head -3 "$file"

            # Basic syntax check using node
            echo "🔍 Checking syntax for $file..."
            if node -c "$file" 2>&1; then
              echo "✅ Syntax OK: $file"
            else
              echo "❌ Syntax Error in $file"
              echo "Error details:"
              node -c "$file"
              syntax_errors=$((syntax_errors + 1))
            fi
          fi
        done

        if [ $syntax_errors -gt 0 ]; then
          echo "❌ Found $syntax_errors syntax errors"
          exit 1
        fi

        echo "✅ All JavaScript files validated successfully"

    - name: 🌐 Setup simple HTTP server
      run: |
        echo "🌐 Starting HTTP server..."

        # Start Python HTTP server in background
        python3 -m http.server 8080 > server.log 2>&1 &
        SERVER_PID=$!
        echo $SERVER_PID > server.pid
        echo "📝 Server PID: $SERVER_PID"

        # Wait for server to start
        sleep 5

        # Check if server process is still running
        if ! kill -0 $SERVER_PID 2>/dev/null; then
          echo "❌ Server process died"
          cat server.log
          exit 1
        fi

        # Test if server is responding
        for i in {1..5}; do
          if curl -f -s http://localhost:8080/ > /dev/null 2>&1; then
            echo "✅ Server is running and responding"
            break
          else
            echo "⏳ Waiting for server to respond (attempt $i/5)"
            sleep 2
          fi

          if [ $i -eq 5 ]; then
            echo "❌ Server failed to respond after 5 attempts"
            cat server.log
            exit 1
          fi
        done

    - name: 🧪 Run browser tests with curl
      run: |
        echo "🧪 Running browser compatibility tests..."

        test_failures=0

        # Test main page loads
        if curl -f -s http://localhost:8080/index.html > /dev/null 2>&1; then
          echo "✅ Main page loads"
        else
          echo "❌ Main page failed to load"
          test_failures=$((test_failures + 1))
        fi

        # Test test page loads (optional, don't fail if missing)
        if curl -f -s http://localhost:8080/tests/test.html > /dev/null 2>&1; then
          echo "✅ Test page loads"
        else
          echo "⚠️ Test page not accessible (optional)"
        fi

        # Test JS modules load
        for file in js/*.js; do
          if [ -f "$file" ]; then
            if curl -f -s "http://localhost:8080/$file" > /dev/null 2>&1; then
              echo "✅ Module loads: $file"
            else
              echo "❌ Module failed to load: $file"
              test_failures=$((test_failures + 1))
            fi
          fi
        done

        # Test that main page contains expected content
        if curl -s http://localhost:8080/index.html | grep -q "BEB.*Email.*Generator"; then
          echo "✅ Main page contains expected content"
        else
          echo "❌ Main page missing expected content"
          test_failures=$((test_failures + 1))
        fi

        if [ $test_failures -gt 0 ]; then
          echo "❌ Found $test_failures test failures"
          exit 1
        fi

        echo "✅ All browser compatibility tests passed"

    - name: 📊 Validate HTML structure
      run: |
        echo "📊 Running HTML validation..."

        # Basic HTML structure validation using grep
        if grep -q "<!DOCTYPE html>" index.html; then
          echo "✅ DOCTYPE declaration found"
        else
          echo "❌ DOCTYPE declaration missing"
          exit 1
        fi

        if grep -q "<html" index.html; then
          echo "✅ HTML tag found"
        else
          echo "❌ HTML tag missing"
          exit 1
        fi

        if grep -q "</html>" index.html; then
          echo "✅ Closing HTML tag found"
        else
          echo "❌ Closing HTML tag missing"
          exit 1
        fi

        echo "✅ HTML validation completed"

    - name: 🔍 Security scan
      run: |
        echo "🔍 Running security checks..."

        # Check for common security issues
        if grep -r "eval(" js/ 2>/dev/null; then
          echo "❌ Found eval() usage - security risk"
          exit 1
        fi

        if grep -r "innerHTML.*+" js/ 2>/dev/null; then
          echo "❌ Found dynamic innerHTML - potential XSS risk"
          exit 1
        fi

        # Check for script tags in HTML that might be vulnerable
        if grep -r "<script.*src=" index.html | grep -v "js/"; then
          echo "⚠️ Found external script references"
        fi

        # Check for hardcoded credentials (more precise patterns)
        echo "🔍 Scanning for hardcoded credentials..."

        # Look for suspicious credential patterns
        suspicious_patterns_found=0

        # Check for actual password assignments
        if grep -r "password\s*=\s*['\"]" js/ --include="*.js" 2>/dev/null; then
          echo "❌ Found hardcoded password assignment"
          suspicious_patterns_found=$((suspicious_patterns_found + 1))
        fi

        # Check for API keys (but exclude our legitimate encryption/cache keys)
        if grep -ri "api_key\|apikey\|access_key\|secret_key" js/ --include="*.js" | grep -v "encryptionKey\|cacheKey\|STORAGE_KEY" 2>/dev/null; then
          echo "❌ Found potential API keys"
          suspicious_patterns_found=$((suspicious_patterns_found + 1))
        fi

        # Check for hardcoded tokens
        if grep -ri "token\s*=\s*['\"][a-zA-Z0-9]{20,}" js/ --include="*.js" 2>/dev/null; then
          echo "❌ Found potential hardcoded tokens"
          suspicious_patterns_found=$((suspicious_patterns_found + 1))
        fi

        # Check for database credentials
        if grep -ri "db_password\|database.*password\|mysql.*password" js/ --include="*.js" 2>/dev/null; then
          echo "❌ Found potential database credentials"
          suspicious_patterns_found=$((suspicious_patterns_found + 1))
        fi

        if [ $suspicious_patterns_found -gt 0 ]; then
          echo "❌ Found $suspicious_patterns_found potential security issues"
          exit 1
        fi

        echo "✅ No hardcoded credentials found"

        echo "✅ Basic security checks passed"

    - name: 📏 Code quality checks
      run: |
        echo "📏 Running code quality checks..."

        # Check file sizes
        HTML_SIZE=$(wc -c < index.html)
        if [ $HTML_SIZE -gt 100000 ]; then
          echo "⚠️ HTML file is large: ${HTML_SIZE} bytes"
        fi

        # Count JavaScript modules
        JS_FILES=$(find js/ -name "*.js" | wc -l)
        echo "📦 JavaScript modules: $JS_FILES"

        # Check for TODO comments in production code
        TODO_COUNT=$(grep -r "TODO\|FIXME\|HACK" js/ | wc -l)
        if [ $TODO_COUNT -gt 0 ]; then
          echo "📝 Found $TODO_COUNT TODO/FIXME comments"
        fi

        echo "✅ Code quality checks completed"

    - name: 🧹 Clean up server
      run: |
        # Kill the HTTP server
        if [ -f server.pid ]; then
          kill $(cat server.pid) 2>/dev/null || echo "Server already stopped"
          rm -f server.pid
        fi

  accessibility:
    name: ♿ Accessibility Tests
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: ♿ Basic accessibility checks
      run: |
        echo "♿ Running basic accessibility checks..."

        # Check for alt attributes on images
        if grep -r "<img" index.html | grep -v "alt="; then
          echo "⚠️ Found images without alt attributes"
        else
          echo "✅ All images have alt attributes"
        fi

        # Check for proper heading structure
        if grep -q "<h1" index.html; then
          echo "✅ H1 heading found"
        else
          echo "⚠️ No H1 heading found"
        fi

        # Check for form labels
        if grep -r "<input" index.html | grep -v "aria-label\|<label"; then
          echo "⚠️ Found inputs without labels"
        else
          echo "✅ All inputs have labels or aria-labels"
        fi

        # Check for ARIA attributes
        if grep -q "aria-" index.html; then
          echo "✅ ARIA attributes found"
        else
          echo "⚠️ No ARIA attributes found"
        fi

        echo "✅ Basic accessibility checks completed"

  performance:
    name: ⚡ Performance Tests
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: ⚡ Basic performance checks
      run: |
        echo "⚡ Running basic performance checks..."

        # Check file sizes
        HTML_SIZE=$(wc -c < index.html | tr -d ' ')
        echo "📄 HTML size: ${HTML_SIZE} bytes"
        if [ $HTML_SIZE -gt 100000 ]; then
          echo "⚠️ HTML file is large: ${HTML_SIZE} bytes"
        fi

        # Check JavaScript file sizes
        total_js_size=0
        for file in js/*.js; do
          if [ -f "$file" ]; then
            size=$(wc -c < "$file" | tr -d ' ')
            echo "📄 $file: ${size} bytes"
            total_js_size=$((total_js_size + size))
          fi
        done
        echo "📄 Total JavaScript: ${total_js_size} bytes"

        # Count HTTP requests (approximate)
        js_files=$(find js/ -name "*.js" | wc -l)
        echo "📡 JavaScript modules: $js_files"

        # Check for performance best practices
        if grep -q "defer\|async" index.html; then
          echo "✅ Script loading optimization found"
        else
          echo "⚠️ Consider adding defer/async to scripts"
        fi

        echo "✅ Basic performance checks completed"

  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test, accessibility, performance]
    if: github.ref == 'refs/heads/develop'

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🚀 Deploy to staging
      run: |
        echo "🚀 Deploying to staging environment..."
        echo "✅ Staging deployment completed"
        # Add actual deployment commands here

  deploy-production:
    name: 🌐 Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, accessibility, performance]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 📦 Prepare deployment package
      run: |
        echo "📦 Preparing deployment package..."

        # Create deployment directory
        mkdir -p deploy

        # Copy essential files
        cp index.html deploy/
        cp -r js/ deploy/

        # Copy optional files if they exist
        [ -f robots.txt ] && cp robots.txt deploy/ || echo "No robots.txt found"
        [ -f favicon.ico ] && cp favicon.ico deploy/ || echo "No favicon.ico found"
        [ -f manifest.json ] && cp manifest.json deploy/ || echo "No manifest.json found"

        # Create deployment info
        echo "{
          \"version\": \"$(date +%Y%m%d-%H%M%S)\",
          \"commit\": \"$GITHUB_SHA\",
          \"branch\": \"$GITHUB_REF_NAME\",
          \"timestamp\": \"$(date -u)\",
          \"build_number\": \"$GITHUB_RUN_NUMBER\"
        }" > deploy/deployment-info.json

        echo "📋 Deployment package contents:"
        find deploy/ -type f

    - name: 🚀 Deploy via FTP (if configured)
      if: env.FTP_HOST != ''
      timeout-minutes: 10
      continue-on-error: true
      run: |
        echo "🚀 Deploying via FTP to $FTP_HOST..."

        # Install lftp for FTP deployment
        sudo apt-get update && sudo apt-get install -y lftp

        # Test FTP connection first
        echo "🔍 Testing FTP connection..."

        # Test SFTP first (most servers prefer this for security)
        echo "Testing SFTP connection to $FTP_HOST..."
        if timeout 15 lftp -c "set sftp:auto-confirm yes; open sftp://$FTP_USER:$FTP_PASSWORD@$FTP_HOST; ls; quit" 2>/dev/null; then
          echo "✅ SFTP connection successful"
          PROTOCOL="sftp"
        else
          echo "⚠️ SFTP failed, trying FTP..."

          # Fallback to FTP if SFTP fails
          if timeout 15 lftp -c "open ftp://$FTP_USER:$FTP_PASSWORD@$FTP_HOST; ls; quit" 2>/dev/null; then
            echo "✅ FTP connection successful"
            PROTOCOL="ftp"
          else
            echo "❌ Both SFTP and FTP failed"
            echo "💡 Possible issues:"
            echo "  - Wrong credentials (FTP_USER, FTP_PASSWORD)"
            echo "  - Wrong hostname (FTP_HOST)"
            echo "  - Server requires different port (add :PORT to FTP_HOST)"
            echo "  - Firewall blocking GitHub Actions IPs"
            exit 1
          fi
        fi

        echo "🔧 Using protocol: $PROTOCOL"

        # Create lftp script with timeouts and better error handling
        cat > ftp_deploy.sh << EOF
        #!/bin/bash

        # Set timeouts and connection settings for both FTP and SFTP
        lftp -c "
        set net:timeout 30;
        set net:max-retries 3;
        set net:reconnect-interval-base 5;
        set ftp:ssl-allow no;
        set ssl:verify-certificate no;
        set sftp:auto-confirm yes;
        set sftp:connect-program 'ssh -a -x';
        set cmd:fail-exit yes;

        echo 'Connecting to $FTP_HOST using $PROTOCOL...';
        open $PROTOCOL://$FTP_USER:$FTP_PASSWORD@$FTP_HOST || exit 1;

        echo 'Connected! Changing to deploy directory...';
        lcd deploy || exit 1;

        echo 'Changing to remote directory: $FTP_PATH';
        cd $FTP_PATH || exit 1;

        echo 'Starting file synchronization...';
        mirror --reverse --delete --verbose --parallel=2;

        echo 'FTP deployment completed successfully';
        bye"
        EOF

        chmod +x ftp_deploy.sh

        # Run FTP deployment with timeout
        timeout 300 ./ftp_deploy.sh

        if [ $? -eq 0 ]; then
          echo "✅ FTP deployment completed successfully"
        elif [ $? -eq 124 ]; then
          echo "❌ FTP deployment timed out after 5 minutes"
          echo "💡 Possible issues:"
          echo "  - FTP server is slow or unresponsive"
          echo "  - Firewall blocking connection"
          echo "  - Large files taking too long to upload"
          exit 1
        else
          echo "❌ FTP deployment failed"
          echo "💡 Possible issues:"
          echo "  - Wrong FTP credentials (FTP_USER, FTP_PASSWORD)"
          echo "  - Wrong FTP host (FTP_HOST)"
          echo "  - Wrong remote path (FTP_PATH)"
          echo "  - FTP server doesn't allow passive mode"
          echo "  - Server requires SFTP instead of FTP"
          exit 1
        fi
      env:
        FTP_HOST: ${{ secrets.FTP_HOST }}
        FTP_USER: ${{ secrets.FTP_USER }}
        FTP_PASSWORD: ${{ secrets.FTP_PASSWORD }}
        FTP_PATH: ${{ secrets.FTP_PATH }}

    - name: 🌐 Deploy to GitHub Pages
      if: env.GITHUB_TOKEN != ''
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./deploy
        publish_branch: gh-pages
        force_orphan: true

    - name: ☁️ Deploy to Netlify (if configured)
      if: env.NETLIFY_SITE_ID != ''
      run: |
        echo "☁️ Deploying to Netlify..."

        # Install Netlify CLI
        npm install -g netlify-cli

        # Deploy to Netlify
        netlify deploy --prod --dir deploy --site $NETLIFY_SITE_ID --auth $NETLIFY_AUTH_TOKEN

        echo "✅ Netlify deployment completed"
      env:
        NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
        NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}

    - name: 🎯 Deploy to Vercel (if configured)
      if: env.VERCEL_TOKEN != ''
      run: |
        echo "🎯 Deploying to Vercel..."

        # Install Vercel CLI
        npm install -g vercel

        # Deploy to Vercel
        cd deploy
        vercel --prod --token $VERCEL_TOKEN --yes

        echo "✅ Vercel deployment completed"
      env:
        VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
        VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

    - name: 📊 Deployment summary
      run: |
        echo "📊 Deployment Summary"
        echo "===================="
        echo "✅ Package prepared: $(find deploy/ -type f | wc -l) files"
        echo "📅 Timestamp: $(date)"
        echo "🔗 Commit: $GITHUB_SHA"
        echo "🌿 Branch: $GITHUB_REF_NAME"
        echo "🏗️ Build: $GITHUB_RUN_NUMBER"
        echo ""
        echo "🌐 Deployment targets attempted:"
        [ -n "${{ secrets.FTP_HOST }}" ] && echo "  - FTP: ${{ secrets.FTP_HOST }}" || echo "  - FTP: Not configured"
        [ -n "${{ secrets.GITHUB_TOKEN }}" ] && echo "  - GitHub Pages: Enabled" || echo "  - GitHub Pages: Not configured"
        [ -n "${{ secrets.NETLIFY_SITE_ID }}" ] && echo "  - Netlify: ${{ secrets.NETLIFY_SITE_ID }}" || echo "  - Netlify: Not configured"
        [ -n "${{ secrets.VERCEL_TOKEN }}" ] && echo "  - Vercel: Enabled" || echo "  - Vercel: Not configured"

  release:
    name: 📦 Create Release Assets
    runs-on: ubuntu-latest
    if: github.event_name == 'release'

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 📦 Create distribution package
      run: |
        # Create dist directory
        mkdir -p dist

        # Copy main files
        cp index.html dist/
        cp -r js/ dist/

        # Copy additional files if they exist
        [ -d tests/ ] && cp -r tests/ dist/ || echo "⚠️ No tests directory found"
        [ -f README.md ] && cp README.md dist/ || echo "⚠️ No README.md found"
        [ -f README.en.md ] && cp README.en.md dist/ || echo "⚠️ No README.en.md found"
        [ -f TODO.md ] && cp TODO.md dist/ || echo "⚠️ No TODO.md found"
        [ -f TECHNICAL_IMPROVEMENTS.md ] && cp TECHNICAL_IMPROVEMENTS.md dist/ || echo "⚠️ No TECHNICAL_IMPROVEMENTS.md found"
        [ -f version.json ] && cp version.json dist/ || echo "⚠️ No version.json found"
        [ -f LICENSE ] && cp LICENSE dist/ || echo "⚠️ No LICENSE found"

        # Create archive
        tar -czf beb-email-generator-${{ github.event.release.tag_name }}.tar.gz -C dist .
        zip -r beb-email-generator-${{ github.event.release.tag_name }}.zip dist/

    - name: 📤 Upload release assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./beb-email-generator-${{ github.event.release.tag_name }}.tar.gz
        asset_name: beb-email-generator-${{ github.event.release.tag_name }}.tar.gz
        asset_content_type: application/gzip